<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MVC 프레임워크 on Aroong&#39;s Blog</title>
    <link>https://aroong.github.io/tags/mvc-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/</link>
    <description>Recent content in MVC 프레임워크 on Aroong&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://aroong.github.io/tags/mvc-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>MVC 프레임워크 3</title>
      <link>https://aroong.github.io/spring-mvc/10.-mvcframework3/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aroong.github.io/spring-mvc/10.-mvcframework3/</guid>
      <description>1. 프론트 컨트롤러 Version 3 - Model 추가 서블릿 종속성 제거 : 요청 파라메터는 Map으로 받아서 처리하고 request 객체 대신 Model 객체를 구현한다.
-&amp;gt; 코드가 단순해지고 테스트, 수정이 쉬워진다.
뷰 이름 중복 제거 : 물리 위치 이름 대신 논리 이름을 받아서 처리한다.</description>
    </item>
    
    <item>
      <title>MVC 프레임워크 4</title>
      <link>https://aroong.github.io/spring-mvc/11.-mvcframework4/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aroong.github.io/spring-mvc/11.-mvcframework4/</guid>
      <description>1. 프론트 컨트롤러 Version 4 서블릿 종속성 제거 : 요청 파라메터는 Map으로 받아서 처리하고 request 객체 대신 Model 객체를 구현한다. -&amp;gt; 코드가 단순해지고 테스트, 수정이 쉬워진다.
뷰 이름 중복 제거 : 물리 위치 이름 대신 논리 이름을 받아서 처리한다. 물리 위치는 프론트컨트롤러에서만 처리한다.</description>
    </item>
    
    <item>
      <title>MVC 프레임워크 1</title>
      <link>https://aroong.github.io/spring-mvc/8.-mvcframework1/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aroong.github.io/spring-mvc/8.-mvcframework1/</guid>
      <description>1. 프론트 컨트롤러 패턴 클라이언트의 요청을 받는 프론트컨트롤러를 하나 만들고 그 프론트컨트롤러가 요청에 맞는 컨트롤러를 찾아서 호출해준다. 입구를 하나로 하여 공통로직을 수행한다. 프론트컨트롤러를 제외한 나머지 컨트롤러들은 서블릿을 수행하지 않아도 된다. 스프링MVC의 DispatcherServlet이 이 FrontController패턴으로 구현되어있다. (인프런 수업 듣는중) 2. 프론트 컨트롤러 도입 - Version 1 이름을 v1로 하여 이전에 MVC로 만든 회원관리 로직에 프론트 컨트롤러를 도입시켜 보자.</description>
    </item>
    
    <item>
      <title>MVC 프레임워크 2</title>
      <link>https://aroong.github.io/spring-mvc/9.-mvcframework2/</link>
      <pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://aroong.github.io/spring-mvc/9.-mvcframework2/</guid>
      <description>1. 프론트 컨트롤러 Version 2 - View 분리 뷰로 이동하는 부분이 중복되기 때문에 따로 분리하여 객체를 만든다. 뷰 객체는 이후 다른 버전에서도 계속 사용할거기 때문에 frontcontroller 패키지에 MyView로 만든다. (인프런 수업 듣는중) package hello.servlet.web.frontcontroller; import java.io.IOException; import jakarta.servlet.RequestDispatcher; import jakarta.servlet.ServletException; import jakarta.</description>
    </item>
    
  </channel>
</rss>
